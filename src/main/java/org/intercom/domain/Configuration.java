package org.intercom.domain;

// Generated Jun 6, 2012 4:16:49 PM by Hibernate Tools 3.4.0.CR1

import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

/**
 * Configuration generated by hbm2java
 */
@Entity
@Table(name = "CONFIGURATION")
public class Configuration implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private BigDecimal idConfiguration;
	private String nom;
	private BigDecimal encodageDeCaractere;
	private Character separateurDeColonne;
	private Character caractereEchappement;
	private BigDecimal ignorerLignesVides;
	private BigDecimal utiliserNomPremiereLigne;
	private BigDecimal nbLignesALimiter;
	private BigDecimal tailleBlocChargerMemoire;
	private Set<SelectionParIntervalle> selectionParIntervalles = new HashSet<SelectionParIntervalle>(
			0);

	public Configuration() {
	}

	public Configuration(BigDecimal idConfiguration) {
		this.idConfiguration = idConfiguration;
	}


	public Configuration(BigDecimal idConfiguration, String nom,
			BigDecimal encodageDeCaractere, Character separateurDeColonne,
			Character caractereEchappement, BigDecimal ignorerLignesVides,
			BigDecimal utiliserNomPremiereLigne, BigDecimal nbLignesALimiter,
			BigDecimal tailleBlocChargerMemoire,
			Set<SelectionParIntervalle> selectionParIntervalles) {
		this.idConfiguration = idConfiguration;
		this.nom = nom;
		this.encodageDeCaractere = encodageDeCaractere;
		this.separateurDeColonne = separateurDeColonne;
		this.caractereEchappement = caractereEchappement;
		this.ignorerLignesVides = ignorerLignesVides;
		this.utiliserNomPremiereLigne = utiliserNomPremiereLigne;
		this.nbLignesALimiter = nbLignesALimiter;
		this.tailleBlocChargerMemoire = tailleBlocChargerMemoire;
		this.selectionParIntervalles = selectionParIntervalles;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "CONFIGURATION_SEQ_GEN")
	@SequenceGenerator(name = "CONFIGURATION_SEQ_GEN", sequenceName = "CONFIGURATION_SEQ")
	@Column(name = "ID_CONFIGURATION", unique = true, nullable = false, precision = 22, scale = 0)
	public BigDecimal getIdConfiguration() {
		return this.idConfiguration;
	}

	public void setIdConfiguration(BigDecimal idConfiguration) {
		this.idConfiguration = idConfiguration;
	}

	@Column(name = "NOM", length = 20)
	public String getNom() {
		return this.nom;
	}

	public void setNom(String nom) {
		this.nom = nom;
	}

	@Column(name = "ENCODAGE_DE_CARACTERE", precision = 22, scale = 0)
	public BigDecimal getEncodageDeCaractere() {
		return this.encodageDeCaractere;
	}

	public void setEncodageDeCaractere(BigDecimal encodageDeCaractere) {
		this.encodageDeCaractere = encodageDeCaractere;
	}

	@Column(name = "SEPARATEUR_DE_COLONNE", length = 1)
	public Character getSeparateurDeColonne() {
		return this.separateurDeColonne;
	}

	public void setSeparateurDeColonne(Character separateurDeColonne) {
		this.separateurDeColonne = separateurDeColonne;
	}

	@Column(name = "CARACTERE_ECHAPPEMENT", length = 1)
	public Character getCaractereEchappement() {
		return this.caractereEchappement;
	}

	public void setCaractereEchappement(Character caractereEchappement) {
		this.caractereEchappement = caractereEchappement;
	}

	@Column(name = "IGNORER_LIGNES_VIDES", precision = 22, scale = 0)
	public BigDecimal getIgnorerLignesVides() {
		return this.ignorerLignesVides;
	}

	public void setIgnorerLignesVides(BigDecimal ignorerLignesVides) {
		this.ignorerLignesVides = ignorerLignesVides;
	}

	@Column(name = "UTILISER_NOM_PREMIERE_LIGNE", precision = 22, scale = 0)
	public BigDecimal getUtiliserNomPremiereLigne() {
		return this.utiliserNomPremiereLigne;
	}

	public void setUtiliserNomPremiereLigne(BigDecimal utiliserNomPremiereLigne) {
		this.utiliserNomPremiereLigne = utiliserNomPremiereLigne;
	}

	@Column(name = "NB_LIGNES_A_LIMITER", precision = 22, scale = 0)
	public BigDecimal getNbLignesALimiter() {
		return this.nbLignesALimiter;
	}

	public void setNbLignesALimiter(BigDecimal nbLignesALimiter) {
		this.nbLignesALimiter = nbLignesALimiter;
	}

	@Column(name = "TAILLE_BLOC_CHARGER_MEMOIRE", precision = 22, scale = 0)
	public BigDecimal getTailleBlocChargerMemoire() {
		return this.tailleBlocChargerMemoire;
	}

	public void setTailleBlocChargerMemoire(BigDecimal tailleBlocChargerMemoire) {
		this.tailleBlocChargerMemoire = tailleBlocChargerMemoire;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "configuration")
	public Set<SelectionParIntervalle> getSelectionParIntervalles() {
		return this.selectionParIntervalles;
	}

	public void setSelectionParIntervalles(
			Set<SelectionParIntervalle> selectionParIntervalles) {
		this.selectionParIntervalles = selectionParIntervalles;
	}

}
